// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// weighted_mean_univariate
double weighted_mean_univariate(const Rcpp::NumericVector& x, const Rcpp::NumericVector& weights);
RcppExport SEXP _DCFusion_weighted_mean_univariate(SEXP xSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mean_univariate(x, weights));
    return rcpp_result_gen;
END_RCPP
}
// log_rho_univariate
double log_rho_univariate(const Rcpp::NumericVector& x, const double& x_mean, const double& time, const Rcpp::NumericVector& precondition_values);
RcppExport SEXP _DCFusion_log_rho_univariate(SEXP xSEXP, SEXP x_meanSEXP, SEXP timeSEXP, SEXP precondition_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type x_mean(x_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type precondition_values(precondition_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(log_rho_univariate(x, x_mean, time, precondition_values));
    return rcpp_result_gen;
END_RCPP
}
// weighted_variance_univariate
double weighted_variance_univariate(const Rcpp::NumericVector& x, const double& x_mean, const Rcpp::NumericVector& precondition_values);
RcppExport SEXP _DCFusion_weighted_variance_univariate(SEXP xSEXP, SEXP x_meanSEXP, SEXP precondition_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type x_mean(x_meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type precondition_values(precondition_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_variance_univariate(x, x_mean, precondition_values));
    return rcpp_result_gen;
END_RCPP
}
// weighted_trajectory_variation_univariate
double weighted_trajectory_variation_univariate(const Rcpp::List& x_samples, const Rcpp::List& sub_posterior_means, const Rcpp::NumericVector& precondition_values);
RcppExport SEXP _DCFusion_weighted_trajectory_variation_univariate(SEXP x_samplesSEXP, SEXP sub_posterior_meansSEXP, SEXP precondition_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x_samples(x_samplesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sub_posterior_means(sub_posterior_meansSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type precondition_values(precondition_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_trajectory_variation_univariate(x_samples, sub_posterior_means, precondition_values));
    return rcpp_result_gen;
END_RCPP
}
// inverse_sum_matrices
arma::mat inverse_sum_matrices(const Rcpp::List& matrices);
RcppExport SEXP _DCFusion_inverse_sum_matrices(SEXP matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type matrices(matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_sum_matrices(matrices));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mean_multivariate
arma::vec weighted_mean_multivariate(const arma::mat& matrix, const Rcpp::List& weights, const arma::mat& inverse_sum_weights);
RcppExport SEXP _DCFusion_weighted_mean_multivariate(SEXP matrixSEXP, SEXP weightsSEXP, SEXP inverse_sum_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inverse_sum_weights(inverse_sum_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mean_multivariate(matrix, weights, inverse_sum_weights));
    return rcpp_result_gen;
END_RCPP
}
// calculate_proposal_cov
arma::mat calculate_proposal_cov(const double& time, const Rcpp::List& weights);
RcppExport SEXP _DCFusion_calculate_proposal_cov(SEXP timeSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_proposal_cov(time, weights));
    return rcpp_result_gen;
END_RCPP
}
// row_wise_subtraction
arma::mat row_wise_subtraction(const arma::mat& X, const arma::vec& vect);
RcppExport SEXP _DCFusion_row_wise_subtraction(SEXP XSEXP, SEXP vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vect(vectSEXP);
    rcpp_result_gen = Rcpp::wrap(row_wise_subtraction(X, vect));
    return rcpp_result_gen;
END_RCPP
}
// log_rho_multivariate
double log_rho_multivariate(const arma::mat& x, const arma::vec& x_mean, const double& time, const Rcpp::List& inv_precondition_matrices);
RcppExport SEXP _DCFusion_log_rho_multivariate(SEXP xSEXP, SEXP x_meanSEXP, SEXP timeSEXP, SEXP inv_precondition_matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_mean(x_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inv_precondition_matrices(inv_precondition_matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(log_rho_multivariate(x, x_mean, time, inv_precondition_matrices));
    return rcpp_result_gen;
END_RCPP
}
// weighted_variance_multivariate
double weighted_variance_multivariate(const arma::mat& x, const arma::vec& x_mean, const Rcpp::List& inv_precondition_matrices);
RcppExport SEXP _DCFusion_weighted_variance_multivariate(SEXP xSEXP, SEXP x_meanSEXP, SEXP inv_precondition_matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_mean(x_meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inv_precondition_matrices(inv_precondition_matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_variance_multivariate(x, x_mean, inv_precondition_matrices));
    return rcpp_result_gen;
END_RCPP
}
// weighted_trajectory_variation_multivariate
double weighted_trajectory_variation_multivariate(const Rcpp::List& x_samples, const Rcpp::List& sub_posterior_means, const Rcpp::List& inv_precondition_matrices);
RcppExport SEXP _DCFusion_weighted_trajectory_variation_multivariate(SEXP x_samplesSEXP, SEXP sub_posterior_meansSEXP, SEXP inv_precondition_matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x_samples(x_samplesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sub_posterior_means(sub_posterior_meansSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inv_precondition_matrices(inv_precondition_matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_trajectory_variation_multivariate(x_samples, sub_posterior_means, inv_precondition_matrices));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp
double logsumexp(const Rcpp::NumericVector& x);
RcppExport SEXP _DCFusion_logsumexp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(x));
    return rcpp_result_gen;
END_RCPP
}
// particle_ESS
Rcpp::List particle_ESS(const Rcpp::NumericVector& log_weights);
RcppExport SEXP _DCFusion_particle_ESS(SEXP log_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type log_weights(log_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(particle_ESS(log_weights));
    return rcpp_result_gen;
END_RCPP
}
// rho_IS_univariate_
Rcpp::List rho_IS_univariate_(const Rcpp::List& samples_to_fuse, const int& N, const int& m, const double& time, const Rcpp::NumericVector& precondition_values);
RcppExport SEXP _DCFusion_rho_IS_univariate_(SEXP samples_to_fuseSEXP, SEXP NSEXP, SEXP mSEXP, SEXP timeSEXP, SEXP precondition_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type samples_to_fuse(samples_to_fuseSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type precondition_values(precondition_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(rho_IS_univariate_(samples_to_fuse, N, m, time, precondition_values));
    return rcpp_result_gen;
END_RCPP
}
// rho_IS_multivariate_
Rcpp::List rho_IS_multivariate_(const Rcpp::List& samples_to_fuse, const int& dim, const int& N, const int& m, const double& time, const Rcpp::List& inv_precondition_matrices, const arma::mat& inverse_sum_inv_precondition_matrices);
RcppExport SEXP _DCFusion_rho_IS_multivariate_(SEXP samples_to_fuseSEXP, SEXP dimSEXP, SEXP NSEXP, SEXP mSEXP, SEXP timeSEXP, SEXP inv_precondition_matricesSEXP, SEXP inverse_sum_inv_precondition_matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type samples_to_fuse(samples_to_fuseSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inv_precondition_matrices(inv_precondition_matricesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inverse_sum_inv_precondition_matrices(inverse_sum_inv_precondition_matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(rho_IS_multivariate_(samples_to_fuse, dim, N, m, time, inv_precondition_matrices, inverse_sum_inv_precondition_matrices));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(const int& N, const arma::vec& mu, const arma::mat& Sigma);
RcppExport SEXP _DCFusion_mvrnormArma(SEXP NSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(N, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma_tempered
arma::mat mvrnormArma_tempered(const int& N, const arma::vec& mu, const arma::mat& Sigma, const double& beta);
RcppExport SEXP _DCFusion_mvrnormArma_tempered(SEXP NSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma_tempered(N, mu, Sigma, beta));
    return rcpp_result_gen;
END_RCPP
}
// scaled_distance
double scaled_distance(const arma::vec& x, const arma::vec& y, const arma::mat& matrix);
RcppExport SEXP _DCFusion_scaled_distance(SEXP xSEXP, SEXP ySEXP, SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(scaled_distance(x, y, matrix));
    return rcpp_result_gen;
END_RCPP
}
// spectral_radius
double spectral_radius(const arma::mat& A);
RcppExport SEXP _DCFusion_spectral_radius(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(spectral_radius(A));
    return rcpp_result_gen;
END_RCPP
}
// abs_eigenvals
arma::vec abs_eigenvals(const arma::mat& A);
RcppExport SEXP _DCFusion_abs_eigenvals(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(abs_eigenvals(A));
    return rcpp_result_gen;
END_RCPP
}
// maximal_distance_hypercube_to_cv
double maximal_distance_hypercube_to_cv(const arma::vec& beta_hat, const arma::mat& hypercube_vertices, const arma::mat& transform_to_X, const arma::mat& transform_to_Z);
RcppExport SEXP _DCFusion_maximal_distance_hypercube_to_cv(SEXP beta_hatSEXP, SEXP hypercube_verticesSEXP, SEXP transform_to_XSEXP, SEXP transform_to_ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_hat(beta_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type hypercube_vertices(hypercube_verticesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_to_X(transform_to_XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_to_Z(transform_to_ZSEXP);
    rcpp_result_gen = Rcpp::wrap(maximal_distance_hypercube_to_cv(beta_hat, hypercube_vertices, transform_to_X, transform_to_Z));
    return rcpp_result_gen;
END_RCPP
}
// log_BLR_gradient
arma::vec log_BLR_gradient(const arma::vec& beta, const arma::vec& y_labels, const arma::mat& X, const arma::vec& X_beta, const arma::vec& count, const arma::vec& prior_means, const arma::vec& prior_variances, const double& C);
RcppExport SEXP _DCFusion_log_BLR_gradient(SEXP betaSEXP, SEXP y_labelsSEXP, SEXP XSEXP, SEXP X_betaSEXP, SEXP countSEXP, SEXP prior_meansSEXP, SEXP prior_variancesSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_labels(y_labelsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X_beta(X_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_means(prior_meansSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(log_BLR_gradient(beta, y_labels, X, X_beta, count, prior_means, prior_variances, C));
    return rcpp_result_gen;
END_RCPP
}
// log_BLR_hessian
arma::mat log_BLR_hessian(const arma::mat& X, const arma::vec& X_beta, const arma::vec& count, const arma::vec& prior_variances, const double& C);
RcppExport SEXP _DCFusion_log_BLR_hessian(SEXP XSEXP, SEXP X_betaSEXP, SEXP countSEXP, SEXP prior_variancesSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X_beta(X_betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(log_BLR_hessian(X, X_beta, count, prior_variances, C));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_BLR_DL_vec
Rcpp::List ea_phi_BLR_DL_vec(const arma::vec& beta, const arma::vec& y_labels, const arma::mat& X, const arma::vec& count, const arma::vec& prior_means, const arma::vec& prior_variances, const double& C, const arma::mat& precondition_mat);
RcppExport SEXP _DCFusion_ea_phi_BLR_DL_vec(SEXP betaSEXP, SEXP y_labelsSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_meansSEXP, SEXP prior_variancesSEXP, SEXP CSEXP, SEXP precondition_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_labels(y_labelsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_means(prior_meansSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_BLR_DL_vec(beta, y_labels, X, count, prior_means, prior_variances, C, precondition_mat));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_BLR_DL_matrix
Rcpp::List ea_phi_BLR_DL_matrix(const arma::mat& beta, const arma::vec& y_labels, const arma::mat& X, const arma::vec& count, const arma::vec& prior_means, const arma::vec& prior_variances, const double& C, const arma::mat& precondition_mat);
RcppExport SEXP _DCFusion_ea_phi_BLR_DL_matrix(SEXP betaSEXP, SEXP y_labelsSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_meansSEXP, SEXP prior_variancesSEXP, SEXP CSEXP, SEXP precondition_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_labels(y_labelsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_means(prior_meansSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_BLR_DL_matrix(beta, y_labels, X, count, prior_means, prior_variances, C, precondition_mat));
    return rcpp_result_gen;
END_RCPP
}
// spectral_radius_BLR
double spectral_radius_BLR(const arma::vec& beta, const int& dim, const arma::mat& X, const arma::vec& count, const arma::vec& prior_variances, const double& C, const arma::mat& Lambda);
RcppExport SEXP _DCFusion_spectral_radius_BLR(SEXP betaSEXP, SEXP dimSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_variancesSEXP, SEXP CSEXP, SEXP LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(spectral_radius_BLR(beta, dim, X, count, prior_variances, C, Lambda));
    return rcpp_result_gen;
END_RCPP
}
// obtain_hypercube_centre_BLR
Rcpp::List obtain_hypercube_centre_BLR(const Rcpp::List& bessel_layers, const arma::mat& transform_to_X, const arma::vec& y_labels, const arma::mat& X, const arma::vec& count, const arma::vec& prior_means, const arma::vec& prior_variances, const double& C);
RcppExport SEXP _DCFusion_obtain_hypercube_centre_BLR(SEXP bessel_layersSEXP, SEXP transform_to_XSEXP, SEXP y_labelsSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_meansSEXP, SEXP prior_variancesSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type bessel_layers(bessel_layersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_to_X(transform_to_XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_labels(y_labelsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_means(prior_meansSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(obtain_hypercube_centre_BLR(bessel_layers, transform_to_X, y_labels, X, count, prior_means, prior_variances, C));
    return rcpp_result_gen;
END_RCPP
}
// spectral_radius_bound_BLR_Z
Rcpp::List spectral_radius_bound_BLR_Z(const int& dim, const arma::mat& V, const arma::mat& X, const arma::vec& count, const arma::vec& prior_variances, const double& C, const arma::mat& sqrt_Lambda);
RcppExport SEXP _DCFusion_spectral_radius_bound_BLR_Z(SEXP dimSEXP, SEXP VSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_variancesSEXP, SEXP CSEXP, SEXP sqrt_LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sqrt_Lambda(sqrt_LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(spectral_radius_bound_BLR_Z(dim, V, X, count, prior_variances, C, sqrt_Lambda));
    return rcpp_result_gen;
END_RCPP
}
// spectral_radius_global_bound_BLR_Z
Rcpp::List spectral_radius_global_bound_BLR_Z(const int& dim, const arma::mat& X, const arma::vec& count, const arma::vec& prior_variances, const double& C, const arma::mat& sqrt_Lambda);
RcppExport SEXP _DCFusion_spectral_radius_global_bound_BLR_Z(SEXP dimSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_variancesSEXP, SEXP CSEXP, SEXP sqrt_LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sqrt_Lambda(sqrt_LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(spectral_radius_global_bound_BLR_Z(dim, X, count, prior_variances, C, sqrt_Lambda));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_BLR_DL_bounds
Rcpp::List ea_phi_BLR_DL_bounds(const arma::vec& beta_hat, const arma::vec& grad_log_hat, const int& dim, const arma::mat& X, const arma::vec& count, const arma::vec& prior_variances, const double& C, const Rcpp::List& transform_mats, const Rcpp::List& hypercube_vertices, const bool& local_bounds);
RcppExport SEXP _DCFusion_ea_phi_BLR_DL_bounds(SEXP beta_hatSEXP, SEXP grad_log_hatSEXP, SEXP dimSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_variancesSEXP, SEXP CSEXP, SEXP transform_matsSEXP, SEXP hypercube_verticesSEXP, SEXP local_boundsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_hat(beta_hatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grad_log_hat(grad_log_hatSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type transform_mats(transform_matsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type hypercube_vertices(hypercube_verticesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type local_bounds(local_boundsSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_BLR_DL_bounds(beta_hat, grad_log_hat, dim, X, count, prior_variances, C, transform_mats, hypercube_vertices, local_bounds));
    return rcpp_result_gen;
END_RCPP
}
// gamma_NB_BLR
double gamma_NB_BLR(const arma::vec& times, const double& h, const arma::vec& x0, const arma::vec& y, const double& s, const double& t, const arma::vec& y_labels, const arma::mat& X, const arma::vec& count, const arma::vec& prior_means, const arma::vec& prior_variances, const double& C, const arma::mat& precondition_mat);
RcppExport SEXP _DCFusion_gamma_NB_BLR(SEXP timesSEXP, SEXP hSEXP, SEXP x0SEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP y_labelsSEXP, SEXP XSEXP, SEXP countSEXP, SEXP prior_meansSEXP, SEXP prior_variancesSEXP, SEXP CSEXP, SEXP precondition_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_labels(y_labelsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type count(countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_means(prior_meansSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prior_variances(prior_variancesSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_NB_BLR(times, h, x0, y, s, t, y_labels, X, count, prior_means, prior_variances, C, precondition_mat));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_biGaussian_DL_vec
double ea_phi_biGaussian_DL_vec(const arma::vec& x, const arma::vec& mean_vec, const arma::vec& sd_vec, const double& corr, const double& beta, const arma::mat& precondition_mat, const arma::mat& transform_mat);
RcppExport SEXP _DCFusion_ea_phi_biGaussian_DL_vec(SEXP xSEXP, SEXP mean_vecSEXP, SEXP sd_vecSEXP, SEXP corrSEXP, SEXP betaSEXP, SEXP precondition_matSEXP, SEXP transform_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd_vec(sd_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_mat(transform_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_biGaussian_DL_vec(x, mean_vec, sd_vec, corr, beta, precondition_mat, transform_mat));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_biGaussian_DL_matrix
Rcpp::NumericVector ea_phi_biGaussian_DL_matrix(const arma::mat& x, const arma::vec& mean_vec, const arma::vec& sd_vec, const double& corr, const double& beta, const arma::mat& precondition_mat, const arma::mat& transform_mat);
RcppExport SEXP _DCFusion_ea_phi_biGaussian_DL_matrix(SEXP xSEXP, SEXP mean_vecSEXP, SEXP sd_vecSEXP, SEXP corrSEXP, SEXP betaSEXP, SEXP precondition_matSEXP, SEXP transform_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd_vec(sd_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_mat(transform_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_biGaussian_DL_matrix(x, mean_vec, sd_vec, corr, beta, precondition_mat, transform_mat));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_biGaussian_DL_bounds
Rcpp::List ea_phi_biGaussian_DL_bounds(const arma::vec& mean_vec, const arma::vec& sd_vec, const double& corr, const double& beta, const arma::mat& precondition_mat, const arma::mat& transform_to_Z, const arma::mat& transform_to_X, const Rcpp::NumericVector& lower, const Rcpp::NumericVector& upper);
RcppExport SEXP _DCFusion_ea_phi_biGaussian_DL_bounds(SEXP mean_vecSEXP, SEXP sd_vecSEXP, SEXP corrSEXP, SEXP betaSEXP, SEXP precondition_matSEXP, SEXP transform_to_ZSEXP, SEXP transform_to_XSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd_vec(sd_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_to_Z(transform_to_ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_to_X(transform_to_XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_biGaussian_DL_bounds(mean_vec, sd_vec, corr, beta, precondition_mat, transform_to_Z, transform_to_X, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_biGaussian_DL_LB
double ea_phi_biGaussian_DL_LB(const arma::vec& mean_vec, const arma::vec& sd_vec, const double& corr, const double& beta, const arma::mat& precondition_mat);
RcppExport SEXP _DCFusion_ea_phi_biGaussian_DL_LB(SEXP mean_vecSEXP, SEXP sd_vecSEXP, SEXP corrSEXP, SEXP betaSEXP, SEXP precondition_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd_vec(sd_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_biGaussian_DL_LB(mean_vec, sd_vec, corr, beta, precondition_mat));
    return rcpp_result_gen;
END_RCPP
}
// gamma_NB_biGaussian
double gamma_NB_biGaussian(const arma::vec& times, const double& h, const arma::vec& x0, const arma::vec& y, const double& s, const double& t, const arma::vec& mean_vec, const arma::vec& sd_vec, const double& corr, const double& beta, const arma::mat& precondition_mat, const arma::mat& transform_mat);
RcppExport SEXP _DCFusion_gamma_NB_biGaussian(SEXP timesSEXP, SEXP hSEXP, SEXP x0SEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP mean_vecSEXP, SEXP sd_vecSEXP, SEXP corrSEXP, SEXP betaSEXP, SEXP precondition_matSEXP, SEXP transform_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_vec(mean_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd_vec(sd_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type precondition_mat(precondition_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type transform_mat(transform_matSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_NB_biGaussian(times, h, x0, y, s, t, mean_vec, sd_vec, corr, beta, precondition_mat, transform_mat));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_exp_4_DL
Rcpp::NumericVector ea_phi_exp_4_DL(const Rcpp::NumericVector& x, const double& mean, const double& beta, const double& precondition);
RcppExport SEXP _DCFusion_ea_phi_exp_4_DL(SEXP xSEXP, SEXP meanSEXP, SEXP betaSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_exp_4_DL(x, mean, beta, precondition));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_exp_4_DL_bounds
Rcpp::List ea_phi_exp_4_DL_bounds(const double& mean, const double& beta, const double& precondition, const double& lower, const double& upper);
RcppExport SEXP _DCFusion_ea_phi_exp_4_DL_bounds(SEXP meanSEXP, SEXP betaSEXP, SEXP preconditionSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_exp_4_DL_bounds(mean, beta, precondition, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_exp_4_DL_LB
double ea_phi_exp_4_DL_LB(const double& mean, const double& beta, const double& precondition);
RcppExport SEXP _DCFusion_ea_phi_exp_4_DL_LB(SEXP meanSEXP, SEXP betaSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_exp_4_DL_LB(mean, beta, precondition));
    return rcpp_result_gen;
END_RCPP
}
// gamma_NB_exp_4
double gamma_NB_exp_4(const Rcpp::NumericVector& times, const double& h, const double& x0, const double& y, const double& s, const double& t, const double& mean, const double& beta, const double& precondition);
RcppExport SEXP _DCFusion_gamma_NB_exp_4(SEXP timesSEXP, SEXP hSEXP, SEXP x0SEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP meanSEXP, SEXP betaSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_NB_exp_4(times, h, x0, y, s, t, mean, beta, precondition));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_mix_tempered_unnormalised
Rcpp::NumericVector dnorm_mix_tempered_unnormalised(const Rcpp::NumericVector& x, const Rcpp::NumericVector& w, const Rcpp::NumericVector& m, const Rcpp::NumericVector& s, const double& b);
RcppExport SEXP _DCFusion_dnorm_mix_tempered_unnormalised(SEXP xSEXP, SEXP wSEXP, SEXP mSEXP, SEXP sSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_mix_tempered_unnormalised(x, w, m, s, b));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_mixG_DL
Rcpp::NumericVector ea_phi_mixG_DL(const Rcpp::NumericVector& x, const int& n_comp, const Rcpp::NumericVector& weights, const Rcpp::NumericVector& means, const Rcpp::NumericVector& sds, const double& beta, const double& precondition);
RcppExport SEXP _DCFusion_ea_phi_mixG_DL(SEXP xSEXP, SEXP n_compSEXP, SEXP weightsSEXP, SEXP meansSEXP, SEXP sdsSEXP, SEXP betaSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_comp(n_compSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_mixG_DL(x, n_comp, weights, means, sds, beta, precondition));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_mixG_DL_LB
double ea_phi_mixG_DL_LB(const int& n_comp, const Rcpp::NumericVector& weights, const Rcpp::NumericVector& means, const Rcpp::NumericVector& sds, const double& beta, const double& precondition, const double& bounds_multiplier);
RcppExport SEXP _DCFusion_ea_phi_mixG_DL_LB(SEXP n_compSEXP, SEXP weightsSEXP, SEXP meansSEXP, SEXP sdsSEXP, SEXP betaSEXP, SEXP preconditionSEXP, SEXP bounds_multiplierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n_comp(n_compSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    Rcpp::traits::input_parameter< const double& >::type bounds_multiplier(bounds_multiplierSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_mixG_DL_LB(n_comp, weights, means, sds, beta, precondition, bounds_multiplier));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_uniGaussian_DL
Rcpp::NumericVector ea_phi_uniGaussian_DL(const Rcpp::NumericVector& x, const double& mean, const double& sd, const double& beta, const double& precondition);
RcppExport SEXP _DCFusion_ea_phi_uniGaussian_DL(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP betaSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_uniGaussian_DL(x, mean, sd, beta, precondition));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_uniGaussian_DL_bounds
Rcpp::List ea_phi_uniGaussian_DL_bounds(const double& mean, const double& sd, const double& beta, const double& precondition, const double& lower, const double& upper);
RcppExport SEXP _DCFusion_ea_phi_uniGaussian_DL_bounds(SEXP meanSEXP, SEXP sdSEXP, SEXP betaSEXP, SEXP preconditionSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_uniGaussian_DL_bounds(mean, sd, beta, precondition, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// ea_phi_uniGaussian_DL_LB
double ea_phi_uniGaussian_DL_LB(const double& mean, const double& sd, const double& beta, const double& precondition);
RcppExport SEXP _DCFusion_ea_phi_uniGaussian_DL_LB(SEXP meanSEXP, SEXP sdSEXP, SEXP betaSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(ea_phi_uniGaussian_DL_LB(mean, sd, beta, precondition));
    return rcpp_result_gen;
END_RCPP
}
// gamma_NB_uniGaussian
double gamma_NB_uniGaussian(const Rcpp::NumericVector& times, const double& h, const double& x0, const double& y, const double& s, const double& t, const double& mean, const double& sd, const double& beta, const double& precondition);
RcppExport SEXP _DCFusion_gamma_NB_uniGaussian(SEXP timesSEXP, SEXP hSEXP, SEXP x0SEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP betaSEXP, SEXP preconditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type precondition(preconditionSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_NB_uniGaussian(times, h, x0, y, s, t, mean, sd, beta, precondition));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DCFusion_weighted_mean_univariate", (DL_FUNC) &_DCFusion_weighted_mean_univariate, 2},
    {"_DCFusion_log_rho_univariate", (DL_FUNC) &_DCFusion_log_rho_univariate, 4},
    {"_DCFusion_weighted_variance_univariate", (DL_FUNC) &_DCFusion_weighted_variance_univariate, 3},
    {"_DCFusion_weighted_trajectory_variation_univariate", (DL_FUNC) &_DCFusion_weighted_trajectory_variation_univariate, 3},
    {"_DCFusion_inverse_sum_matrices", (DL_FUNC) &_DCFusion_inverse_sum_matrices, 1},
    {"_DCFusion_weighted_mean_multivariate", (DL_FUNC) &_DCFusion_weighted_mean_multivariate, 3},
    {"_DCFusion_calculate_proposal_cov", (DL_FUNC) &_DCFusion_calculate_proposal_cov, 2},
    {"_DCFusion_row_wise_subtraction", (DL_FUNC) &_DCFusion_row_wise_subtraction, 2},
    {"_DCFusion_log_rho_multivariate", (DL_FUNC) &_DCFusion_log_rho_multivariate, 4},
    {"_DCFusion_weighted_variance_multivariate", (DL_FUNC) &_DCFusion_weighted_variance_multivariate, 3},
    {"_DCFusion_weighted_trajectory_variation_multivariate", (DL_FUNC) &_DCFusion_weighted_trajectory_variation_multivariate, 3},
    {"_DCFusion_logsumexp", (DL_FUNC) &_DCFusion_logsumexp, 1},
    {"_DCFusion_particle_ESS", (DL_FUNC) &_DCFusion_particle_ESS, 1},
    {"_DCFusion_rho_IS_univariate_", (DL_FUNC) &_DCFusion_rho_IS_univariate_, 5},
    {"_DCFusion_rho_IS_multivariate_", (DL_FUNC) &_DCFusion_rho_IS_multivariate_, 7},
    {"_DCFusion_mvrnormArma", (DL_FUNC) &_DCFusion_mvrnormArma, 3},
    {"_DCFusion_mvrnormArma_tempered", (DL_FUNC) &_DCFusion_mvrnormArma_tempered, 4},
    {"_DCFusion_scaled_distance", (DL_FUNC) &_DCFusion_scaled_distance, 3},
    {"_DCFusion_spectral_radius", (DL_FUNC) &_DCFusion_spectral_radius, 1},
    {"_DCFusion_abs_eigenvals", (DL_FUNC) &_DCFusion_abs_eigenvals, 1},
    {"_DCFusion_maximal_distance_hypercube_to_cv", (DL_FUNC) &_DCFusion_maximal_distance_hypercube_to_cv, 4},
    {"_DCFusion_log_BLR_gradient", (DL_FUNC) &_DCFusion_log_BLR_gradient, 8},
    {"_DCFusion_log_BLR_hessian", (DL_FUNC) &_DCFusion_log_BLR_hessian, 5},
    {"_DCFusion_ea_phi_BLR_DL_vec", (DL_FUNC) &_DCFusion_ea_phi_BLR_DL_vec, 8},
    {"_DCFusion_ea_phi_BLR_DL_matrix", (DL_FUNC) &_DCFusion_ea_phi_BLR_DL_matrix, 8},
    {"_DCFusion_spectral_radius_BLR", (DL_FUNC) &_DCFusion_spectral_radius_BLR, 7},
    {"_DCFusion_obtain_hypercube_centre_BLR", (DL_FUNC) &_DCFusion_obtain_hypercube_centre_BLR, 8},
    {"_DCFusion_spectral_radius_bound_BLR_Z", (DL_FUNC) &_DCFusion_spectral_radius_bound_BLR_Z, 7},
    {"_DCFusion_spectral_radius_global_bound_BLR_Z", (DL_FUNC) &_DCFusion_spectral_radius_global_bound_BLR_Z, 6},
    {"_DCFusion_ea_phi_BLR_DL_bounds", (DL_FUNC) &_DCFusion_ea_phi_BLR_DL_bounds, 10},
    {"_DCFusion_gamma_NB_BLR", (DL_FUNC) &_DCFusion_gamma_NB_BLR, 13},
    {"_DCFusion_ea_phi_biGaussian_DL_vec", (DL_FUNC) &_DCFusion_ea_phi_biGaussian_DL_vec, 7},
    {"_DCFusion_ea_phi_biGaussian_DL_matrix", (DL_FUNC) &_DCFusion_ea_phi_biGaussian_DL_matrix, 7},
    {"_DCFusion_ea_phi_biGaussian_DL_bounds", (DL_FUNC) &_DCFusion_ea_phi_biGaussian_DL_bounds, 9},
    {"_DCFusion_ea_phi_biGaussian_DL_LB", (DL_FUNC) &_DCFusion_ea_phi_biGaussian_DL_LB, 5},
    {"_DCFusion_gamma_NB_biGaussian", (DL_FUNC) &_DCFusion_gamma_NB_biGaussian, 12},
    {"_DCFusion_ea_phi_exp_4_DL", (DL_FUNC) &_DCFusion_ea_phi_exp_4_DL, 4},
    {"_DCFusion_ea_phi_exp_4_DL_bounds", (DL_FUNC) &_DCFusion_ea_phi_exp_4_DL_bounds, 5},
    {"_DCFusion_ea_phi_exp_4_DL_LB", (DL_FUNC) &_DCFusion_ea_phi_exp_4_DL_LB, 3},
    {"_DCFusion_gamma_NB_exp_4", (DL_FUNC) &_DCFusion_gamma_NB_exp_4, 9},
    {"_DCFusion_dnorm_mix_tempered_unnormalised", (DL_FUNC) &_DCFusion_dnorm_mix_tempered_unnormalised, 5},
    {"_DCFusion_ea_phi_mixG_DL", (DL_FUNC) &_DCFusion_ea_phi_mixG_DL, 7},
    {"_DCFusion_ea_phi_mixG_DL_LB", (DL_FUNC) &_DCFusion_ea_phi_mixG_DL_LB, 7},
    {"_DCFusion_ea_phi_uniGaussian_DL", (DL_FUNC) &_DCFusion_ea_phi_uniGaussian_DL, 5},
    {"_DCFusion_ea_phi_uniGaussian_DL_bounds", (DL_FUNC) &_DCFusion_ea_phi_uniGaussian_DL_bounds, 6},
    {"_DCFusion_ea_phi_uniGaussian_DL_LB", (DL_FUNC) &_DCFusion_ea_phi_uniGaussian_DL_LB, 4},
    {"_DCFusion_gamma_NB_uniGaussian", (DL_FUNC) &_DCFusion_gamma_NB_uniGaussian, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_DCFusion(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
