% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mixG_fusion.R
\name{ea_phi_mixG_DL_bounds}
\alias{ea_phi_mixG_DL_bounds}
\title{Obtain bounds for phi function}
\usage{
ea_phi_mixG_DL_bounds(
  n_comp,
  weights,
  means,
  sds,
  beta,
  precondition,
  PHI,
  lower,
  upper,
  bounds_multiplier,
  seq_length = 1000
)
}
\arguments{
\item{n_comp}{integer number of components of mixture Gaussian}

\item{weights}{vector: weights of mixture Gaussian}

\item{means}{vector: means of mixture Gassuan}

\item{sds}{vector: st.devs of mixture Gaussian}

\item{beta}{real value}

\item{precondition}{precondition value}

\item{PHI}{global lower bound of phi}

\item{lower}{lower end of interval}

\item{upper}{upper end of interval}

\item{bounds_multiplier}{scalar value to mulitply bounds by 
(should greater than or equal to 1)}

\item{seq_length}{desired length of the sequence that we compute phi in the
interval [lower, upper]. Default is 1000}
}
\value{
vector of lower and upper bound of phi-function between [lower, upper]
}
\description{
Finds the lower and upper bounds of the phi function between an interval
}
\examples{
weights <- c(0.4, 0.6)
means <- c(-3, 6)
sds <- c(1, 2)
beta <- 0.5
precondition <- 1.5
lower <- -10
upper <- 4
curve(ea_phi_mixG_DL(x,
                     n_comp = 2,
                     weights = weights,
                     means = means,
                     sds = sds,
                     beta = beta,
                     precondition = precondition),
      from = -20, to = 25, n = 10000,
      ylab = 'phi')
PHI <- ea_phi_mixG_DL_LB(n_comp = 2,
                         weights = weights,
                         means = means,
                         sds = sds,
                         beta = beta,
                         precondition = precondition,
                         bounds_multiplier = 1)
bounds <- ea_phi_mixG_DL_bounds(n_comp = 2,
                                weights = weights,
                                means = means,
                                sds = sds,
                                beta = beta,
                                precondition = precondition,
                                PHI = PHI,
                                lower = lower,
                                upper = upper,
                                bounds_multiplier = 1)
abline(v=c(lower, upper))
abline(h=PHI, col = 'red')
abline(h=c(bounds$UB, bounds$LB), col = 'blue', lty = 2)

}
