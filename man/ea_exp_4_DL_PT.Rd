% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exp_4_fusion.R
\name{ea_exp_4_DL_PT}
\alias{ea_exp_4_DL_PT}
\title{#' phi-function for exp(-(((x-mean)^4)*beta)/2)
#'
#' phi-function for the Exact Algorithm for exp(-(((x-mean)^4)*beta)/2)
#'
#' @param x real value
#' @param beta beta value
#' @param mean mean value
#' @param precondition precondition value
#'
#' @return real value
#'
#' @examples
#' curve(ea_phi_exp_4_DL(x, 0, 1, 1), from = -4, to = 4)
#'
#' @export
ea_phi_exp_4_DL <- function(x, mean, beta, precondition) {
  y <- x - mean
  return(precondition*((2*beta*beta*(y^6))-(3*beta*y*y)))
}}
\usage{
ea_exp_4_DL_PT(x0, y, s, t, mean, beta, precondition, logarithm)
}
\arguments{
\item{x0}{start value}

\item{y}{end value}

\item{s}{start time}

\item{t}{end time}

\item{mean}{mean value}

\item{beta}{real value}

\item{precondition}{precondition value (i.e the covariance for 
the Langevin diffusion)}

\item{logarithm}{logical value to determine if log probability is 
returned (TRUE) or not (FALSE)}

\item{K}{lower bound of the phi function}
}
\value{
acceptance probability of simulating langevin diffusion with pi = 
        exp(-(beta*(x-mean)^4)/2)
}
\description{
#' Obtain bounds for phi function
#'
#' Finds the lower and upper bounds of the phi function between a given interval
#'
#' @param mean mean value
#' @param beta beta value
#' @param lower lower end of interval
#' @param upper upper end of interval
#' @param precondition precondition value
#'
#' @return A list of components
#' \describe{
#'   \item{LB}{lower bound of phi}
#'   \item{UB}{upper bound of phi}
#' }
#'
#' @examples
#' mu <- 0.435
#' beta <- 0.583
#' precondition <- 1.243
#' lower <- 0
#' upper <- 1.2
#'
#' curve(ea_phi_exp_4_DL(x, mu, beta, precondition), lower, upper, ylab = 'phi')
#' abline(v=c(lower, upper))
#' abline(h=bound_phi_exp_4(mean = mu,
#'                          beta = beta,
#'                          lower = lower,
#'                          upper = upper,
#'                          precondition = precondition),
#'                          col = 'red', lty = 2)
#'
#' @export
ea_phi_exp_4_DL_bounds <- function(mean, beta, precondition, lower, upper) {
  x <- c(lower, upper)
  if (mean > lower & mean < upper) {x <- c(x, mean)}
  m1 <- mean - (1/(2*beta))^(0.25)
  m2 <- mean + (1/(2*beta))^(0.25)
  if (m1 > lower & m1 < upper) {x <- c(x, m1)}
  if (m2 > lower & m2 < upper) {x <- c(x, m2)}
  phi <- ea_phi_exp_4_DL(x = x, mean = mean, beta = beta, precondition = precondition)
  return(list('LB' = min(phi), 'UB' = max(phi)))
}
}
\details{
#' Obtain the global lower bound for phi function
#'
#' Finds the global bound of the phi function between a given interval
#'
#' @param mean mean value
#' @param beta beta value
#' @param precondition precondition value
#'
#' @return The global lower bound of phi
#'
#' @examples
#' mu <- 0.435
#' beta <- 0.583
#' precondition <- 1.243
#' lower <- 0
#' upper <- 1.6
#'
#' curve(phi_exp_4(x, mu, beta, precondition), lower, upper, ylab = 'phi')
#' abline(v=c(lower, upper))
#' abline(h=ea_phi_exp_4_DL_LB(mean = mu,
#'                             beta = beta,
#'                             precondition = precondition))
#' abline(h=ea_phi_exp_4_DL_bounds(mean = mu,
#'                                 beta = beta,
#'                                 lower = lower,
#'                                 upper = upper,
#'                                 precondition = precondition),
#'                                 col = 'red', lty = 2)
#'
#' @export
ea_phi_exp_4_DL_LB <- function(mean, beta, precondition) {
  x <- c(mean - (1/(2*beta))^(0.25), mean + (1/(2*beta))^(0.25))
  return(min(ea_phi_exp_4_DL(x = x, mean = mean, beta = beta, precondition)))
}
Diffusion probability for the Exact Algorithm for langevin diffusion 
with pi = exp(-(beta*(x-mean)^4)/2) 

Evaluate probability of langevin diffusion using the Exact Algorithm with pi = 
exp(-(beta*(x-mean)^4)/2) using Poisson thinning
}
\examples{
mu <- 0.435
beta <- 0.583
precondition <- 1.243
ea_exp_4_DL_PT(x0 = 0,
               y = 0.23,
               s = 0,
               t = 1,
               mean = mu,
               beta = beta,
               precondition = precondition,
               logarithm = TRUE)

}
