% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/univariate_Gaussian_fusion.R
\name{ea_uniGaussian_DL_PT}
\alias{ea_uniGaussian_DL_PT}
\title{#' phi-function for tempered Gaussian distribution
#'
#' phi-function for the Exact Algorithm for tempered Gaussian distribution
#'
#' @param x real value
#' @param mean mean value
#' @param sd standard deviation value
#' @param beta real value
#' @param precondition precondition value
#'
#' @return real value
#'
#' @examples
#' curve(ea_phi_uniGaussian_DL(x, 0, 1, 1, 1), from = -4, to = 4)
#'
#' @export
ea_phi_uniGaussian_DL <- function(x, mean, sd, beta, precondition) {
  y <- x - mean
  t1 <- (beta*beta*y*y)/(sd^4)
  t2 <- beta/(sd*sd)
  return(0.5*precondition*(t1+t2))
}}
\usage{
ea_uniGaussian_DL_PT(x0, y, s, t, mean, sd, beta, precondition, logarithm)
}
\arguments{
\item{x0}{start value}

\item{y}{end value}

\item{s}{start time}

\item{t}{end time}

\item{mean}{mean value}

\item{sd}{standard deviation value}

\item{beta}{real value}

\item{precondition}{precondition value (i.e. the covariance for 
the Langevin diffusion)}

\item{logarithm}{logical value to determine if log probability is 
returned (TRUE) or not (FALSE)}
}
\value{
acceptance probability of simulating langevin diffusion with pi =
        tempered Gaussian distribution
}
\description{
#' Obtain bounds for phi function
#'
#' Finds the lower and upper bounds of the phi function between an interval
#'
#' @param mean mean value
#' @param sd standard deviation value
#' @param beta real value
#' @param lower lower end of interval
#' @param upper upper end of interval
#' @param precondition precondition value
#'
#' @return A list of components
#' \describe{
#'   \item{LB}{lower bound of phi}
#'   \item{UB}{upper bound of phi}
#' }
#'
#' @examples
#' mu <- 0.423
#' sd <- 3.231
#' beta <- 0.8693
#' precondition <- 1.243
#' lower <- -2.823
#' upper <- 4.322
#' curve(ea_phi_uniGaussian_DL(x, mu, sd, beta, precondition), lower, upper)
#' abline(h=ea_phi_uniGaussian_DL_bounds(mean = mu,
#'                                       sd = sd,
#'                                       beta = beta,
#'                                       lower = lower,
#'                                       upper = upper,
#'                                       precondition = precondition),
#'        col = 'red', lty = 2)
#' 
#' #' another example where the mean is not in the interval
#' mu <- 0.423
#' sd <- 3.231
#' beta <- 0.8693
#' precondition <- 1.243
#' lower <- 2.823
#' upper <- 5.322
#' curve(ea_phi_uniGaussian_DL(x, mu, sd, beta, precondition), lower, upper)
#' abline(h=ea_phi_uniGaussian_DL_bounds(mean = mu,
#'                                       sd = sd,
#'                                       beta = beta,
#'                                       lower = lower,
#'                                       upper = upper,
#'                                       precondition = precondition),
#'        col = 'red', lty = 2)
#'
#' @export
ea_phi_uniGaussian_DL_bounds <- function(mean, sd, beta, precondition, lower, upper) {
  x <- c(lower, upper)
  if (mean > lower & mean < upper) {x <- c(x, mean)}
  phi <- ea_phi_uniGaussian_DL(x = x,
                               mean = mean,
                               sd = sd,
                               beta = beta,
                               precondition = precondition)
  return(list('LB' = min(phi), 'UB' = max(phi)))
}
}
\details{
#' Obtain bounds for phi function
#'
#' Finds the lower and upper bounds of the phi function between an interval
#'
#' @param mean mean value
#' @param sd standard deviation value
#' @param beta real value
#' @param lower lower end of interval
#' @param upper upper end of interval
#' @param precondition precondition value
#'
#' @return A list of components
#' \describe{
#'   \item{LB}{lower bound of phi}
#'   \item{UB}{upper bound of phi}
#' }
#'
#' @examples
#' mu <- 0.423
#' sd <- 3.231
#' beta <- 0.8693
#' precondition <- 1.243
#' lower <- -2.823
#' upper <- 4.322
#' curve(ea_phi_uniGaussian_DL(x, mu, sd, beta, precondition), lower, upper)
#' abline(h=ea_phi_uniGaussian_DL_bounds(mean = mu,
#'                                       sd = sd,
#'                                       beta = beta,
#'                                       lower = lower,
#'                                       upper = upper,
#'                                       precondition = precondition),
#'        col = 'red', lty = 2)
#' abline(h=ea_phi_uniGaussian_DL_LB(mean = mu,
#'                                   sd = sd,
#'                                   beta = beta,
#'                                   precondition = precondition),
#'        col = 'blue', lty = 3)
#' 
#' #' another example where the mean is not in the interval
#' mu <- 0.423
#' sd <- 3.231
#' beta <- 0.8693
#' precondition <- 1.243
#' lower <- 2.823
#' upper <- 5.322
#' curve(ea_phi_uniGaussian_DL(x, mu, sd, beta, precondition), lower, upper)
#' abline(h=ea_phi_uniGaussian_DL_bounds(mean = mu,
#'                                       sd = sd,
#'                                       beta = beta,
#'                                       lower = lower,
#'                                       upper = upper,
#'                                       precondition = precondition),
#'        col = 'red', lty = 2)
#' abline(h=ea_phi_uniGaussian_DL_LB(mean = mu,
#'                                   sd = sd,
#'                                   beta = beta,
#'                                   precondition = precondition),
#'        col = 'blue', lty = 3)
#'
#' @export
ea_phi_uniGaussian_DL_LB <- function(mean, sd, beta, precondition) {
  return(ea_phi_uniGaussian_DL(x = mean,
                               mean = mean,
                               sd = sd,
                               beta = beta,
                               precondition = precondition))
}
Diffusion probability for the Exact Algorithm for langevin diffusion for 
tempered Gaussian distribution

Simulate langevin diffusion using the Exact Algorithm where pi = 
tempered Gaussian distribution
}
\examples{
mu <- 0.423
sd <- 3.231
beta <- 0.8693
precondition <- 1.243
ea_uniGaussian_DL_PT(x0 = 0,
                     y = 0.5,
                     s = 0,
                     t = 1,
                     mean = mu,
                     sd = sd,
                     beta = beta,
                     precondition = precondition,
                     logarithm = TRUE)

}
